<0.14.2.95.11.08.25.mp3r+@J.GP.CS.CMU.EDU (Margaret Profeta).0>
Type:     cmu.cs.scs
Topic:    POP SEMINAR
<speaker>Dates</speaker>:    17-Feb-95
Time:     <stime>3:30 PM</stime> - <etime>5:00 PM</etime>
PostedBy: mp3r+ on 14-Feb-95 at 11:08 from J.GP.CS.CMU.EDU (Margaret Profeta)
Abstract: 
                      CONTEXT DEPENDENT OPTIMIZATIONS

                              Morten Welinder
                             DIKU, Copenhagen

                         Friday, February 17, 1995

                    WeH 8220      <stime>3:30 p.m</stime>. <paragraph><sentence>- <etime>5:00 p.m</etime>.</sentence>
     One  <speaker>price</speaker>  paid  for  using  a  typed  language  for  writing an
     interpreter is that it <speaker>will</speaker> typically have to encode  the  values
     of  the  interpreted  program explicitly into one universal type,
     Val.

     Since Val <speaker>will</speaker> be visible from the type of the interpreter (e.g.,
     Prg  x  Val  ->  Val  for a simple one) programs derived from the
     interpreter by using, i.e., partial evaluation <speaker>will</speaker>  inherit  the
     universal  type  and perform repeated projections and injections.
     <sentence>That is certainly not what we want.</sentence></paragraph>

     However, a study of a typical derived program shows  that  it  is
     not  possible  to improve much without further information.  This
     is where the context of the program comes in.  A  "context"  here
     is  a  description  of  the  input  --  in  the form of a grammer
     defining a subset of all possible Val values  --  and  a  similar
     description of the output.

     In  words,  the  context makes certain promises about the form of
     the input and the output.  In the <speaker>case</speaker> of residual programs  from
     partial evaluation it is trivial to create good contexts.

     From  the  context it is possible to identify operations that are
     not needed.  This can result in drastic  improvements,  at  least
     with pen-and-paper examples.

      <speaker>Note</speaker>:   We <speaker>welcome Morten</speaker> to our department.  He <speaker>will</speaker> be visiting
      with <speaker>Peter Lee</speaker> for six months.
