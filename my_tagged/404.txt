<0.8.3.93.16.15.15.trg+@N3.SP.CS.CMU.EDU (<speaker>Thomas Gross</speaker>).0>
Type:     cmu.cs.scs
Topic:    PSC/CS Seminar 3/12 4:00 WeH 5202 S. <speaker>Frank</speaker> of KSR Inc.
<speaker>Dates</speaker>:    12-Mar-93
Time:     4:00
PostedBy: trg+ on 8-Mar-93 at 16:15 from N3.SP.CS.CMU.EDU (<speaker>Thomas Gross</speaker>)
<speaker>Abstract</speaker>: 


   KSR1: High Performance and Ease of Programming,
          No Longer an Oxymoron

		 <speaker>Steve <speaker>Frank</speaker></speaker>
          Kendall Square Research

   Friday, <speaker>March</speaker> 12, <speaker>1993</speaker>, <stime>4:00 p.m</stime>., WeH 5205
				      ^^^^^^^^
					Note different room this time only

Historically, shared memory has been the main line programming model from
an applications and computer science perspective for two reasons: shared
memory is a flexible and high performance means of communicating between
processors, tasks or threads and; shared memory provides high programming
efficiency through use of conventional memory management methods.

<paragraph><sentence>The KSRl bridges the gap between the historical shared memory model and
MPPs by delivering the shared memory programming model and all of its
benefits, in a scalable, highly parallel architecture.</sentence>  <sentence>The KSRl runs
a broad range of mainstream applications, ranging from numerically
intensive computation, to on-line transaction processing (OLTP) and
database management and inquiry.</sentence>  <sentence>The KSRl's shared memory programming
model is made possible by a new architectural technique called ALLCACHE.</sentence></paragraph>

<paragraph><sentence>This talk <speaker>will</speaker> start by describing ALLCACHE, a logical extension of virtual
memory and cache memory.</sentence>  <sentence>The shared memory programming model delivered by
ALLCACHE facilitates porting and high performance for customer and third
party applications.</sentence>  <sentence>Within this context, the KSRl architecture and
applications environment consisting of a conventional UNIX based OS
(symmetrically executing across all processors) and programming environment
(including conventional languages) <speaker>will</speaker> be described.</sentence>  <sentence>The talk <speaker><speaker>will</speaker> conclude</speaker>
with a discussion of experiences porting customer specific and third party
applications.</sentence></paragraph>

----
If you are interested in talking to <speaker>Steve <speaker>Frank</speaker></speaker>, please send mail to bag@cs.
