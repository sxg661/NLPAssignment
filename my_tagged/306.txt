<0.6.12.94.16.19.21.plp+@HOSTESS.GRAPHICS.CS.CMU.EDU (<speaker>Phyllis Pomerantz</speaker>).0>
Type:     Special CS Seminar
Who:      <speaker>Jerome <speaker>Feldman</speaker></speaker>, ICSI and UC Berkeley
Topic:    pSather 1.0 - A Simpler Second System
Dates:    7-Dec-94
Time:     <stime>1:00 PM</stime>
Place:    4615A Wean Hall
Duration: 1 1/2 hours
<speaker>Host</speaker>:     <speaker>Jon</speaker> A Webb 
PostedBy: plp+ on 6-Dec-94 at 16:19 from HOSTESS.GRAPHICS.CS.CMU.EDU (<speaker>Phyllis Pomerantz</speaker>)
Abstract: 

 Type:     Special CS Seminar
 Who:      <speaker>Jerome <speaker>Feldman</speaker></speaker>, ICSI and UC Berkeley
 Topic:    pSather 1.0 - A Simpler Second System
 Dates:    7-Dec-94
 Time:     1 p.m.
 Place:    4615A Wean Hall
 Duration: 1 1/2 hours
 <speaker>Host</speaker>:     <speaker>Jon</speaker> A Webb 

               pSather 1.0 - A Simpler Second System

                        <speaker>Jerome <speaker>Feldman</speaker></speaker>
         International Computer Science Institute and UC Berkeley

pSather is a set of parallel and distributed extensions to the
object-oriented serial language Sather. <sentence>After some years of internal
experience with implementations and applications, the pSather 1.0 system is
being developed for portability and general distribution.</sentence>  <sentence>pSather addresses
NUMA architectures such as networks of workstations, but provides a relaxed
consistency shared-memory model to the programmer.</sentence> <sentence>A goal of the language is
to suport the construction of efficient reusable classes in which the
parallelism is implicit to the user.</sentence>  <sentence>Explicit language support is provided
for objects spread over nodes at the same local address and for parallel and
distributed control regimes.</sentence>  <sentence>A distinguished class GATE generalizes
previous low-level synchronization mechanisms such as locks, futures and
conditions.</sentence>  <sentence>The object-orientation of pSather allows users to define other
synchronization classes which are easy to use, safe, fair, and difficult to
deadlock.</sentence>  Object-orientation also facilitates the construction of efficient
scalable data structures by allowing reuse of serial code distributed over
the system without an implicit synchronization penalty.

